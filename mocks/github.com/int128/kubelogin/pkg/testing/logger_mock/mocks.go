// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package logger_mock

import (
	mock "github.com/stretchr/testify/mock"
)

// newMocktestingLogger creates a new instance of mocktestingLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocktestingLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocktestingLogger {
	mock := &mocktestingLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocktestingLogger is an autogenerated mock type for the testingLogger type
type mocktestingLogger struct {
	mock.Mock
}

type mocktestingLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mocktestingLogger) EXPECT() *mocktestingLogger_Expecter {
	return &mocktestingLogger_Expecter{mock: &_m.Mock}
}

// Logf provides a mock function for the type mocktestingLogger
func (_mock *mocktestingLogger) Logf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// mocktestingLogger_Logf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logf'
type mocktestingLogger_Logf_Call struct {
	*mock.Call
}

// Logf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *mocktestingLogger_Expecter) Logf(format interface{}, v ...interface{}) *mocktestingLogger_Logf_Call {
	return &mocktestingLogger_Logf_Call{Call: _e.mock.On("Logf",
		append([]interface{}{format}, v...)...)}
}

func (_c *mocktestingLogger_Logf_Call) Run(run func(format string, v ...interface{})) *mocktestingLogger_Logf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mocktestingLogger_Logf_Call) Return() *mocktestingLogger_Logf_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocktestingLogger_Logf_Call) RunAndReturn(run func(format string, v ...interface{})) *mocktestingLogger_Logf_Call {
	_c.Run(run)
	return _c
}
