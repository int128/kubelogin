// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/int128/kubelogin/pkg/adaptors/browser"
	"github.com/int128/kubelogin/pkg/adaptors/certpool"
	"github.com/int128/kubelogin/pkg/adaptors/clock"
	"github.com/int128/kubelogin/pkg/adaptors/cmd"
	"github.com/int128/kubelogin/pkg/adaptors/credentialpluginwriter"
	"github.com/int128/kubelogin/pkg/adaptors/kubeconfig"
	"github.com/int128/kubelogin/pkg/adaptors/logger"
	"github.com/int128/kubelogin/pkg/adaptors/oidcclient"
	"github.com/int128/kubelogin/pkg/adaptors/reader"
	"github.com/int128/kubelogin/pkg/adaptors/stdio"
	"github.com/int128/kubelogin/pkg/adaptors/tokencache"
	"github.com/int128/kubelogin/pkg/usecases/authentication"
	"github.com/int128/kubelogin/pkg/usecases/credentialplugin"
	"github.com/int128/kubelogin/pkg/usecases/setup"
	"github.com/int128/kubelogin/pkg/usecases/standalone"
	"os"
)

// Injectors from di.go:

func NewCmd() cmd.Interface {
	stdin := _wireFileValue
	stdout := _wireOsFileValue
	loggerInterface := logger.New()
	browserBrowser := &browser.Browser{}
	cmdInterface := NewCmdForHeadless(stdin, stdout, loggerInterface, browserBrowser)
	return cmdInterface
}

var (
	_wireFileValue   = os.Stdin
	_wireOsFileValue = os.Stdout
)

func NewCmdForHeadless(stdin stdio.Stdin, stdout stdio.Stdout, loggerInterface logger.Interface, browserInterface browser.Interface) cmd.Interface {
	newFunc := _wireNewFuncValue
	clockClock := &clock.Clock{}
	authCode := &authentication.AuthCode{
		Browser: browserInterface,
		Logger:  loggerInterface,
	}
	readerReader := &reader.Reader{
		Stdin: stdin,
	}
	authCodeKeyboard := &authentication.AuthCodeKeyboard{
		Reader: readerReader,
		Logger: loggerInterface,
	}
	ropc := &authentication.ROPC{
		Reader: readerReader,
		Logger: loggerInterface,
	}
	authenticationAuthentication := &authentication.Authentication{
		NewOIDCClient:    newFunc,
		Logger:           loggerInterface,
		Clock:            clockClock,
		AuthCode:         authCode,
		AuthCodeKeyboard: authCodeKeyboard,
		ROPC:             ropc,
	}
	kubeconfigKubeconfig := &kubeconfig.Kubeconfig{
		Logger: loggerInterface,
	}
	certpoolNewFunc := _wireCertpoolNewFuncValue
	standaloneStandalone := &standalone.Standalone{
		Authentication: authenticationAuthentication,
		Kubeconfig:     kubeconfigKubeconfig,
		NewCertPool:    certpoolNewFunc,
		Logger:         loggerInterface,
	}
	root := &cmd.Root{
		Standalone: standaloneStandalone,
		Logger:     loggerInterface,
	}
	repository := &tokencache.Repository{}
	writer := &credentialpluginwriter.Writer{
		Stdout: stdout,
	}
	getToken := &credentialplugin.GetToken{
		Authentication:       authenticationAuthentication,
		TokenCacheRepository: repository,
		NewCertPool:          certpoolNewFunc,
		Writer:               writer,
		Logger:               loggerInterface,
	}
	cmdGetToken := &cmd.GetToken{
		GetToken: getToken,
		Logger:   loggerInterface,
	}
	setupSetup := &setup.Setup{
		Authentication: authenticationAuthentication,
		NewCertPool:    certpoolNewFunc,
		Logger:         loggerInterface,
	}
	cmdSetup := &cmd.Setup{
		Setup: setupSetup,
	}
	cmdCmd := &cmd.Cmd{
		Root:     root,
		GetToken: cmdGetToken,
		Setup:    cmdSetup,
		Logger:   loggerInterface,
	}
	return cmdCmd
}

var (
	_wireNewFuncValue         = oidcclient.NewFunc(oidcclient.New)
	_wireCertpoolNewFuncValue = certpool.NewFunc(certpool.New)
)
