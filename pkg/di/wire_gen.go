// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/pipedrive/kubelogin/pkg/adaptors/certpool"
	"github.com/pipedrive/kubelogin/pkg/adaptors/cmd"
	"github.com/pipedrive/kubelogin/pkg/adaptors/credentialplugin"
	"github.com/pipedrive/kubelogin/pkg/adaptors/env"
	"github.com/pipedrive/kubelogin/pkg/adaptors/jwtdecoder"
	"github.com/pipedrive/kubelogin/pkg/adaptors/kubeconfig"
	"github.com/pipedrive/kubelogin/pkg/adaptors/logger"
	"github.com/pipedrive/kubelogin/pkg/adaptors/oidcclient"
	"github.com/pipedrive/kubelogin/pkg/adaptors/tokencache"
	"github.com/pipedrive/kubelogin/pkg/usecases/authentication"
	credentialplugin2 "github.com/pipedrive/kubelogin/pkg/usecases/credentialplugin"
	"github.com/pipedrive/kubelogin/pkg/usecases/setup"
	"github.com/pipedrive/kubelogin/pkg/usecases/standalone"
)

// Injectors from di.go:

func NewCmd() cmd.Interface {
	loggerInterface := logger.New()
	factory := &oidcclient.Factory{
		Logger: loggerInterface,
	}
	decoder := &jwtdecoder.Decoder{}
	envEnv := &env.Env{}
	localServerReadyFunc := _wireLocalServerReadyFuncValue
	authCode := &authentication.AuthCode{
		Env:                  envEnv,
		Logger:               loggerInterface,
		LocalServerReadyFunc: localServerReadyFunc,
	}
	authCodeKeyboard := &authentication.AuthCodeKeyboard{
		Env:    envEnv,
		Logger: loggerInterface,
	}
	ropc := &authentication.ROPC{
		Env:    envEnv,
		Logger: loggerInterface,
	}
	authenticationAuthentication := &authentication.Authentication{
		OIDCClientFactory: factory,
		JWTDecoder:        decoder,
		Logger:            loggerInterface,
		AuthCode:          authCode,
		AuthCodeKeyboard:  authCodeKeyboard,
		ROPC:              ropc,
	}
	kubeconfigKubeconfig := &kubeconfig.Kubeconfig{
		Logger: loggerInterface,
	}
	certpoolFactory := &certpool.Factory{}
	standaloneStandalone := &standalone.Standalone{
		Authentication:  authenticationAuthentication,
		Kubeconfig:      kubeconfigKubeconfig,
		CertPoolFactory: certpoolFactory,
		Logger:          loggerInterface,
	}
	root := &cmd.Root{
		Standalone: standaloneStandalone,
		Logger:     loggerInterface,
	}
	repository := &tokencache.Repository{}
	interaction := &credentialplugin.Interaction{}
	getToken := &credentialplugin2.GetToken{
		Authentication:       authenticationAuthentication,
		TokenCacheRepository: repository,
		CertPoolFactory:      certpoolFactory,
		Interaction:          interaction,
		Logger:               loggerInterface,
	}
	cmdGetToken := &cmd.GetToken{
		GetToken: getToken,
		Logger:   loggerInterface,
	}
	setupSetup := &setup.Setup{
		Authentication:  authenticationAuthentication,
		CertPoolFactory: certpoolFactory,
		Logger:          loggerInterface,
	}
	cmdSetup := &cmd.Setup{
		Setup: setupSetup,
	}
	cmdCmd := &cmd.Cmd{
		Root:     root,
		GetToken: cmdGetToken,
		Setup:    cmdSetup,
		Logger:   loggerInterface,
	}
	return cmdCmd
}

var (
	_wireLocalServerReadyFuncValue = authentication.DefaultLocalServerReadyFunc
)

func NewCmdForHeadless(loggerInterface logger.Interface, localServerReadyFunc authentication.LocalServerReadyFunc, credentialpluginInterface credentialplugin.Interface) cmd.Interface {
	factory := &oidcclient.Factory{
		Logger: loggerInterface,
	}
	decoder := &jwtdecoder.Decoder{}
	envEnv := &env.Env{}
	authCode := &authentication.AuthCode{
		Env:                  envEnv,
		Logger:               loggerInterface,
		LocalServerReadyFunc: localServerReadyFunc,
	}
	authCodeKeyboard := &authentication.AuthCodeKeyboard{
		Env:    envEnv,
		Logger: loggerInterface,
	}
	ropc := &authentication.ROPC{
		Env:    envEnv,
		Logger: loggerInterface,
	}
	authenticationAuthentication := &authentication.Authentication{
		OIDCClientFactory: factory,
		JWTDecoder:        decoder,
		Logger:            loggerInterface,
		AuthCode:          authCode,
		AuthCodeKeyboard:  authCodeKeyboard,
		ROPC:              ropc,
	}
	kubeconfigKubeconfig := &kubeconfig.Kubeconfig{
		Logger: loggerInterface,
	}
	certpoolFactory := &certpool.Factory{}
	standaloneStandalone := &standalone.Standalone{
		Authentication:  authenticationAuthentication,
		Kubeconfig:      kubeconfigKubeconfig,
		CertPoolFactory: certpoolFactory,
		Logger:          loggerInterface,
	}
	root := &cmd.Root{
		Standalone: standaloneStandalone,
		Logger:     loggerInterface,
	}
	repository := &tokencache.Repository{}
	getToken := &credentialplugin2.GetToken{
		Authentication:       authenticationAuthentication,
		TokenCacheRepository: repository,
		CertPoolFactory:      certpoolFactory,
		Interaction:          credentialpluginInterface,
		Logger:               loggerInterface,
	}
	cmdGetToken := &cmd.GetToken{
		GetToken: getToken,
		Logger:   loggerInterface,
	}
	setupSetup := &setup.Setup{
		Authentication:  authenticationAuthentication,
		CertPoolFactory: certpoolFactory,
		Logger:          loggerInterface,
	}
	cmdSetup := &cmd.Setup{
		Setup: setupSetup,
	}
	cmdCmd := &cmd.Cmd{
		Root:     root,
		GetToken: cmdGetToken,
		Setup:    cmdSetup,
		Logger:   loggerInterface,
	}
	return cmdCmd
}
