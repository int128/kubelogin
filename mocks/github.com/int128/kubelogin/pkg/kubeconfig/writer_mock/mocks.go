// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package writer_mock

import (
	"github.com/int128/kubelogin/pkg/kubeconfig"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// UpdateAuthProvider provides a mock function for the type MockInterface
func (_mock *MockInterface) UpdateAuthProvider(p kubeconfig.AuthProvider) error {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthProvider")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(kubeconfig.AuthProvider) error); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_UpdateAuthProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthProvider'
type MockInterface_UpdateAuthProvider_Call struct {
	*mock.Call
}

// UpdateAuthProvider is a helper method to define mock.On call
//   - p kubeconfig.AuthProvider
func (_e *MockInterface_Expecter) UpdateAuthProvider(p interface{}) *MockInterface_UpdateAuthProvider_Call {
	return &MockInterface_UpdateAuthProvider_Call{Call: _e.mock.On("UpdateAuthProvider", p)}
}

func (_c *MockInterface_UpdateAuthProvider_Call) Run(run func(p kubeconfig.AuthProvider)) *MockInterface_UpdateAuthProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 kubeconfig.AuthProvider
		if args[0] != nil {
			arg0 = args[0].(kubeconfig.AuthProvider)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_UpdateAuthProvider_Call) Return(err error) *MockInterface_UpdateAuthProvider_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_UpdateAuthProvider_Call) RunAndReturn(run func(p kubeconfig.AuthProvider) error) *MockInterface_UpdateAuthProvider_Call {
	_c.Call.Return(run)
	return _c
}
