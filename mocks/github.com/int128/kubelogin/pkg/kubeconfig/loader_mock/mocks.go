// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package loader_mock

import (
	"github.com/int128/kubelogin/pkg/kubeconfig"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// GetCurrentAuthProvider provides a mock function for the type MockInterface
func (_mock *MockInterface) GetCurrentAuthProvider(explicitFilename string, contextName kubeconfig.ContextName, userName kubeconfig.UserName) (*kubeconfig.AuthProvider, error) {
	ret := _mock.Called(explicitFilename, contextName, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentAuthProvider")
	}

	var r0 *kubeconfig.AuthProvider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, kubeconfig.ContextName, kubeconfig.UserName) (*kubeconfig.AuthProvider, error)); ok {
		return returnFunc(explicitFilename, contextName, userName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, kubeconfig.ContextName, kubeconfig.UserName) *kubeconfig.AuthProvider); ok {
		r0 = returnFunc(explicitFilename, contextName, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubeconfig.AuthProvider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, kubeconfig.ContextName, kubeconfig.UserName) error); ok {
		r1 = returnFunc(explicitFilename, contextName, userName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetCurrentAuthProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentAuthProvider'
type MockInterface_GetCurrentAuthProvider_Call struct {
	*mock.Call
}

// GetCurrentAuthProvider is a helper method to define mock.On call
//   - explicitFilename string
//   - contextName kubeconfig.ContextName
//   - userName kubeconfig.UserName
func (_e *MockInterface_Expecter) GetCurrentAuthProvider(explicitFilename interface{}, contextName interface{}, userName interface{}) *MockInterface_GetCurrentAuthProvider_Call {
	return &MockInterface_GetCurrentAuthProvider_Call{Call: _e.mock.On("GetCurrentAuthProvider", explicitFilename, contextName, userName)}
}

func (_c *MockInterface_GetCurrentAuthProvider_Call) Run(run func(explicitFilename string, contextName kubeconfig.ContextName, userName kubeconfig.UserName)) *MockInterface_GetCurrentAuthProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 kubeconfig.ContextName
		if args[1] != nil {
			arg1 = args[1].(kubeconfig.ContextName)
		}
		var arg2 kubeconfig.UserName
		if args[2] != nil {
			arg2 = args[2].(kubeconfig.UserName)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInterface_GetCurrentAuthProvider_Call) Return(authProvider *kubeconfig.AuthProvider, err error) *MockInterface_GetCurrentAuthProvider_Call {
	_c.Call.Return(authProvider, err)
	return _c
}

func (_c *MockInterface_GetCurrentAuthProvider_Call) RunAndReturn(run func(explicitFilename string, contextName kubeconfig.ContextName, userName kubeconfig.UserName) (*kubeconfig.AuthProvider, error)) *MockInterface_GetCurrentAuthProvider_Call {
	_c.Call.Return(run)
	return _c
}
