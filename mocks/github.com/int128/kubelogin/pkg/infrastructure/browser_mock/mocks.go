// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package browser_mock

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Open provides a mock function for the type MockInterface
func (_mock *MockInterface) Open(url string) error {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(url)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockInterface_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - url string
func (_e *MockInterface_Expecter) Open(url interface{}) *MockInterface_Open_Call {
	return &MockInterface_Open_Call{Call: _e.mock.On("Open", url)}
}

func (_c *MockInterface_Open_Call) Run(run func(url string)) *MockInterface_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_Open_Call) Return(err error) *MockInterface_Open_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_Open_Call) RunAndReturn(run func(url string) error) *MockInterface_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OpenCommand provides a mock function for the type MockInterface
func (_mock *MockInterface) OpenCommand(ctx context.Context, command string, args []string, url string) error {
	ret := _mock.Called(ctx, command, args, url)

	if len(ret) == 0 {
		panic("no return value specified for OpenCommand")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, string) error); ok {
		r0 = returnFunc(ctx, command, args, url)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_OpenCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenCommand'
type MockInterface_OpenCommand_Call struct {
	*mock.Call
}

// OpenCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - args []string
//   - url string
func (_e *MockInterface_Expecter) OpenCommand(ctx interface{}, command interface{}, args interface{}, url interface{}) *MockInterface_OpenCommand_Call {
	return &MockInterface_OpenCommand_Call{Call: _e.mock.On("OpenCommand", ctx, command, args, url)}
}

func (_c *MockInterface_OpenCommand_Call) Run(run func(ctx context.Context, command string, args []string, url string)) *MockInterface_OpenCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockInterface_OpenCommand_Call) Return(err error) *MockInterface_OpenCommand_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_OpenCommand_Call) RunAndReturn(run func(ctx context.Context, command string, args []string, url string) error) *MockInterface_OpenCommand_Call {
	_c.Call.Return(run)
	return _c
}
