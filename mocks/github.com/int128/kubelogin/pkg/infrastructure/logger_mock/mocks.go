// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package logger_mock

import (
	"github.com/int128/kubelogin/pkg/infrastructure/logger"
	"github.com/spf13/pflag"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// AddFlags provides a mock function for the type MockInterface
func (_mock *MockInterface) AddFlags(f *pflag.FlagSet) {
	_mock.Called(f)
	return
}

// MockInterface_AddFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFlags'
type MockInterface_AddFlags_Call struct {
	*mock.Call
}

// AddFlags is a helper method to define mock.On call
//   - f
func (_e *MockInterface_Expecter) AddFlags(f interface{}) *MockInterface_AddFlags_Call {
	return &MockInterface_AddFlags_Call{Call: _e.mock.On("AddFlags", f)}
}

func (_c *MockInterface_AddFlags_Call) Run(run func(f *pflag.FlagSet)) *MockInterface_AddFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pflag.FlagSet))
	})
	return _c
}

func (_c *MockInterface_AddFlags_Call) Return() *MockInterface_AddFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_AddFlags_Call) RunAndReturn(run func(f *pflag.FlagSet)) *MockInterface_AddFlags_Call {
	_c.Run(run)
	return _c
}

// IsEnabled provides a mock function for the type MockInterface
func (_mock *MockInterface) IsEnabled(level int) bool {
	ret := _mock.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(int) bool); ok {
		r0 = returnFunc(level)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockInterface_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockInterface_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
//   - level
func (_e *MockInterface_Expecter) IsEnabled(level interface{}) *MockInterface_IsEnabled_Call {
	return &MockInterface_IsEnabled_Call{Call: _e.mock.On("IsEnabled", level)}
}

func (_c *MockInterface_IsEnabled_Call) Run(run func(level int)) *MockInterface_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockInterface_IsEnabled_Call) Return(b bool) *MockInterface_IsEnabled_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockInterface_IsEnabled_Call) RunAndReturn(run func(level int) bool) *MockInterface_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function for the type MockInterface
func (_mock *MockInterface) Printf(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockInterface_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type MockInterface_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format
//   - args
func (_e *MockInterface_Expecter) Printf(format interface{}, args ...interface{}) *MockInterface_Printf_Call {
	return &MockInterface_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockInterface_Printf_Call) Run(run func(format string, args ...interface{})) *MockInterface_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]interface{})
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_Printf_Call) Return() *MockInterface_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Printf_Call) RunAndReturn(run func(format string, args ...interface{})) *MockInterface_Printf_Call {
	_c.Run(run)
	return _c
}

// V provides a mock function for the type MockInterface
func (_mock *MockInterface) V(level int) logger.Verbose {
	ret := _mock.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for V")
	}

	var r0 logger.Verbose
	if returnFunc, ok := ret.Get(0).(func(int) logger.Verbose); ok {
		r0 = returnFunc(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Verbose)
		}
	}
	return r0
}

// MockInterface_V_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V'
type MockInterface_V_Call struct {
	*mock.Call
}

// V is a helper method to define mock.On call
//   - level
func (_e *MockInterface_Expecter) V(level interface{}) *MockInterface_V_Call {
	return &MockInterface_V_Call{Call: _e.mock.On("V", level)}
}

func (_c *MockInterface_V_Call) Run(run func(level int)) *MockInterface_V_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockInterface_V_Call) Return(verbose logger.Verbose) *MockInterface_V_Call {
	_c.Call.Return(verbose)
	return _c
}

func (_c *MockInterface_V_Call) RunAndReturn(run func(level int) logger.Verbose) *MockInterface_V_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerbose creates a new instance of MockVerbose. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerbose(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerbose {
	mock := &MockVerbose{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVerbose is an autogenerated mock type for the Verbose type
type MockVerbose struct {
	mock.Mock
}

type MockVerbose_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerbose) EXPECT() *MockVerbose_Expecter {
	return &MockVerbose_Expecter{mock: &_m.Mock}
}

// Infof provides a mock function for the type MockVerbose
func (_mock *MockVerbose) Infof(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockVerbose_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockVerbose_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format
//   - args
func (_e *MockVerbose_Expecter) Infof(format interface{}, args ...interface{}) *MockVerbose_Infof_Call {
	return &MockVerbose_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockVerbose_Infof_Call) Run(run func(format string, args ...interface{})) *MockVerbose_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]interface{})
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockVerbose_Infof_Call) Return() *MockVerbose_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVerbose_Infof_Call) RunAndReturn(run func(format string, args ...interface{})) *MockVerbose_Infof_Call {
	_c.Run(run)
	return _c
}

// newMockgoLogger creates a new instance of mockgoLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockgoLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockgoLogger {
	mock := &mockgoLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockgoLogger is an autogenerated mock type for the goLogger type
type mockgoLogger struct {
	mock.Mock
}

type mockgoLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockgoLogger) EXPECT() *mockgoLogger_Expecter {
	return &mockgoLogger_Expecter{mock: &_m.Mock}
}

// Printf provides a mock function for the type mockgoLogger
func (_mock *mockgoLogger) Printf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// mockgoLogger_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type mockgoLogger_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format
//   - v
func (_e *mockgoLogger_Expecter) Printf(format interface{}, v ...interface{}) *mockgoLogger_Printf_Call {
	return &mockgoLogger_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, v...)...)}
}

func (_c *mockgoLogger_Printf_Call) Run(run func(format string, v ...interface{})) *mockgoLogger_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]interface{})
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockgoLogger_Printf_Call) Return() *mockgoLogger_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockgoLogger_Printf_Call) RunAndReturn(run func(format string, v ...interface{})) *mockgoLogger_Printf_Call {
	_c.Run(run)
	return _c
}
