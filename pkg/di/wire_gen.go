// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/int128/kubelogin/pkg/adaptors/browser"
	"github.com/int128/kubelogin/pkg/adaptors/clock"
	"github.com/int128/kubelogin/pkg/adaptors/cmd"
	"github.com/int128/kubelogin/pkg/adaptors/logger"
	"github.com/int128/kubelogin/pkg/adaptors/mutex"
	"github.com/int128/kubelogin/pkg/adaptors/oidcclient"
	"github.com/int128/kubelogin/pkg/adaptors/reader"
	"github.com/int128/kubelogin/pkg/adaptors/stdio"
	writer2 "github.com/int128/kubelogin/pkg/credentialplugin/writer"
	loader2 "github.com/int128/kubelogin/pkg/kubeconfig/loader"
	"github.com/int128/kubelogin/pkg/kubeconfig/writer"
	"github.com/int128/kubelogin/pkg/tlsclientconfig/loader"
	"github.com/int128/kubelogin/pkg/tokencache/repository"
	"github.com/int128/kubelogin/pkg/usecases/authentication"
	"github.com/int128/kubelogin/pkg/usecases/authentication/authcode"
	"github.com/int128/kubelogin/pkg/usecases/authentication/ropc"
	"github.com/int128/kubelogin/pkg/usecases/credentialplugin"
	"github.com/int128/kubelogin/pkg/usecases/setup"
	"github.com/int128/kubelogin/pkg/usecases/standalone"
	"os"
)

// Injectors from di.go:

func NewCmd() cmd.Interface {
	clockReal := &clock.Real{}
	stdin := _wireFileValue
	stdout := _wireOsFileValue
	loggerInterface := logger.New()
	browserBrowser := &browser.Browser{}
	cmdInterface := NewCmdForHeadless(clockReal, stdin, stdout, loggerInterface, browserBrowser)
	return cmdInterface
}

var (
	_wireFileValue   = os.Stdin
	_wireOsFileValue = os.Stdout
)

func NewCmdForHeadless(clockInterface clock.Interface, stdin stdio.Stdin, stdout stdio.Stdout, loggerInterface logger.Interface, browserInterface browser.Interface) cmd.Interface {
	loaderLoader := loader.Loader{}
	factory := &oidcclient.Factory{
		Loader: loaderLoader,
		Clock:  clockInterface,
		Logger: loggerInterface,
	}
	authcodeBrowser := &authcode.Browser{
		Browser: browserInterface,
		Logger:  loggerInterface,
	}
	readerReader := &reader.Reader{
		Stdin: stdin,
	}
	keyboard := &authcode.Keyboard{
		Reader: readerReader,
		Logger: loggerInterface,
	}
	ropcROPC := &ropc.ROPC{
		Reader: readerReader,
		Logger: loggerInterface,
	}
	authenticationAuthentication := &authentication.Authentication{
		OIDCClient:       factory,
		Logger:           loggerInterface,
		Clock:            clockInterface,
		AuthCodeBrowser:  authcodeBrowser,
		AuthCodeKeyboard: keyboard,
		ROPC:             ropcROPC,
	}
	loader3 := &loader2.Loader{}
	writerWriter := &writer.Writer{}
	standaloneStandalone := &standalone.Standalone{
		Authentication:   authenticationAuthentication,
		KubeconfigLoader: loader3,
		KubeconfigWriter: writerWriter,
		Logger:           loggerInterface,
	}
	root := &cmd.Root{
		Standalone: standaloneStandalone,
		Logger:     loggerInterface,
	}
	repositoryRepository := &repository.Repository{}
	writer3 := &writer2.Writer{
		Stdout: stdout,
	}
	mutexMutex := &mutex.Mutex{
		Logger: loggerInterface,
	}
	getToken := &credentialplugin.GetToken{
		Authentication:       authenticationAuthentication,
		TokenCacheRepository: repositoryRepository,
		Writer:               writer3,
		Mutex:                mutexMutex,
		Logger:               loggerInterface,
	}
	cmdGetToken := &cmd.GetToken{
		GetToken: getToken,
		Logger:   loggerInterface,
	}
	setupSetup := &setup.Setup{
		Authentication: authenticationAuthentication,
		Logger:         loggerInterface,
	}
	cmdSetup := &cmd.Setup{
		Setup: setupSetup,
	}
	cmdCmd := &cmd.Cmd{
		Root:     root,
		GetToken: cmdGetToken,
		Setup:    cmdSetup,
		Logger:   loggerInterface,
	}
	return cmdCmd
}
