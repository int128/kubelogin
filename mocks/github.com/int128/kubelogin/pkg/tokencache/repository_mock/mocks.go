// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_mock

import (
	"io"

	"github.com/int128/kubelogin/pkg/oidc"
	"github.com/int128/kubelogin/pkg/tokencache"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// DeleteAll provides a mock function for the type MockInterface
func (_mock *MockInterface) DeleteAll(config tokencache.Config) error {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(tokencache.Config) error); ok {
		r0 = returnFunc(config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type MockInterface_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
//   - config tokencache.Config
func (_e *MockInterface_Expecter) DeleteAll(config interface{}) *MockInterface_DeleteAll_Call {
	return &MockInterface_DeleteAll_Call{Call: _e.mock.On("DeleteAll", config)}
}

func (_c *MockInterface_DeleteAll_Call) Run(run func(config tokencache.Config)) *MockInterface_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tokencache.Config
		if args[0] != nil {
			arg0 = args[0].(tokencache.Config)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_DeleteAll_Call) Return(err error) *MockInterface_DeleteAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_DeleteAll_Call) RunAndReturn(run func(config tokencache.Config) error) *MockInterface_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByKey provides a mock function for the type MockInterface
func (_mock *MockInterface) FindByKey(config tokencache.Config, key tokencache.Key) (*oidc.TokenSet, error) {
	ret := _mock.Called(config, key)

	if len(ret) == 0 {
		panic("no return value specified for FindByKey")
	}

	var r0 *oidc.TokenSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(tokencache.Config, tokencache.Key) (*oidc.TokenSet, error)); ok {
		return returnFunc(config, key)
	}
	if returnFunc, ok := ret.Get(0).(func(tokencache.Config, tokencache.Key) *oidc.TokenSet); ok {
		r0 = returnFunc(config, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(tokencache.Config, tokencache.Key) error); ok {
		r1 = returnFunc(config, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_FindByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByKey'
type MockInterface_FindByKey_Call struct {
	*mock.Call
}

// FindByKey is a helper method to define mock.On call
//   - config tokencache.Config
//   - key tokencache.Key
func (_e *MockInterface_Expecter) FindByKey(config interface{}, key interface{}) *MockInterface_FindByKey_Call {
	return &MockInterface_FindByKey_Call{Call: _e.mock.On("FindByKey", config, key)}
}

func (_c *MockInterface_FindByKey_Call) Run(run func(config tokencache.Config, key tokencache.Key)) *MockInterface_FindByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tokencache.Config
		if args[0] != nil {
			arg0 = args[0].(tokencache.Config)
		}
		var arg1 tokencache.Key
		if args[1] != nil {
			arg1 = args[1].(tokencache.Key)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_FindByKey_Call) Return(tokenSet *oidc.TokenSet, err error) *MockInterface_FindByKey_Call {
	_c.Call.Return(tokenSet, err)
	return _c
}

func (_c *MockInterface_FindByKey_Call) RunAndReturn(run func(config tokencache.Config, key tokencache.Key) (*oidc.TokenSet, error)) *MockInterface_FindByKey_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function for the type MockInterface
func (_mock *MockInterface) Lock(config tokencache.Config, key tokencache.Key) (io.Closer, error) {
	ret := _mock.Called(config, key)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 io.Closer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(tokencache.Config, tokencache.Key) (io.Closer, error)); ok {
		return returnFunc(config, key)
	}
	if returnFunc, ok := ret.Get(0).(func(tokencache.Config, tokencache.Key) io.Closer); ok {
		r0 = returnFunc(config, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(tokencache.Config, tokencache.Key) error); ok {
		r1 = returnFunc(config, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockInterface_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - config tokencache.Config
//   - key tokencache.Key
func (_e *MockInterface_Expecter) Lock(config interface{}, key interface{}) *MockInterface_Lock_Call {
	return &MockInterface_Lock_Call{Call: _e.mock.On("Lock", config, key)}
}

func (_c *MockInterface_Lock_Call) Run(run func(config tokencache.Config, key tokencache.Key)) *MockInterface_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tokencache.Config
		if args[0] != nil {
			arg0 = args[0].(tokencache.Config)
		}
		var arg1 tokencache.Key
		if args[1] != nil {
			arg1 = args[1].(tokencache.Key)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_Lock_Call) Return(closer io.Closer, err error) *MockInterface_Lock_Call {
	_c.Call.Return(closer, err)
	return _c
}

func (_c *MockInterface_Lock_Call) RunAndReturn(run func(config tokencache.Config, key tokencache.Key) (io.Closer, error)) *MockInterface_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockInterface
func (_mock *MockInterface) Save(config tokencache.Config, key tokencache.Key, tokenSet oidc.TokenSet) error {
	ret := _mock.Called(config, key, tokenSet)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(tokencache.Config, tokencache.Key, oidc.TokenSet) error); ok {
		r0 = returnFunc(config, key, tokenSet)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - config tokencache.Config
//   - key tokencache.Key
//   - tokenSet oidc.TokenSet
func (_e *MockInterface_Expecter) Save(config interface{}, key interface{}, tokenSet interface{}) *MockInterface_Save_Call {
	return &MockInterface_Save_Call{Call: _e.mock.On("Save", config, key, tokenSet)}
}

func (_c *MockInterface_Save_Call) Run(run func(config tokencache.Config, key tokencache.Key, tokenSet oidc.TokenSet)) *MockInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tokencache.Config
		if args[0] != nil {
			arg0 = args[0].(tokencache.Config)
		}
		var arg1 tokencache.Key
		if args[1] != nil {
			arg1 = args[1].(tokencache.Key)
		}
		var arg2 oidc.TokenSet
		if args[2] != nil {
			arg2 = args[2].(oidc.TokenSet)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInterface_Save_Call) Return(err error) *MockInterface_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_Save_Call) RunAndReturn(run func(config tokencache.Config, key tokencache.Key, tokenSet oidc.TokenSet) error) *MockInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}
