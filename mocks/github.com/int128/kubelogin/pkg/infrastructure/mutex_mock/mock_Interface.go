// Code generated by mockery v2.44.1. DO NOT EDIT.

package mutex_mock

import (
	context "context"

	mutex "github.com/int128/kubelogin/pkg/infrastructure/mutex"
	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: ctx, name
func (_m *MockInterface) Acquire(ctx context.Context, name string) (*mutex.Lock, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 *mutex.Lock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*mutex.Lock, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *mutex.Lock); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mutex.Lock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockInterface_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockInterface_Expecter) Acquire(ctx interface{}, name interface{}) *MockInterface_Acquire_Call {
	return &MockInterface_Acquire_Call{Call: _e.mock.On("Acquire", ctx, name)}
}

func (_c *MockInterface_Acquire_Call) Run(run func(ctx context.Context, name string)) *MockInterface_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_Acquire_Call) Return(_a0 *mutex.Lock, _a1 error) *MockInterface_Acquire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Acquire_Call) RunAndReturn(run func(context.Context, string) (*mutex.Lock, error)) *MockInterface_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: lock
func (_m *MockInterface) Release(lock *mutex.Lock) error {
	ret := _m.Called(lock)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mutex.Lock) error); ok {
		r0 = rf(lock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockInterface_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - lock *mutex.Lock
func (_e *MockInterface_Expecter) Release(lock interface{}) *MockInterface_Release_Call {
	return &MockInterface_Release_Call{Call: _e.mock.On("Release", lock)}
}

func (_c *MockInterface_Release_Call) Run(run func(lock *mutex.Lock)) *MockInterface_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mutex.Lock))
	})
	return _c
}

func (_c *MockInterface_Release_Call) Return(_a0 error) *MockInterface_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Release_Call) RunAndReturn(run func(*mutex.Lock) error) *MockInterface_Release_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
